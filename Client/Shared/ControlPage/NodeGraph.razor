@using VirtualStudio.ViewModels
@using System.Collections.Specialized

@inject INoodleDragService NoodleDragService

<div class="viewport nodegraph" onwheel="panzoom.zoom(event)"
     @onmousedown="StartPan" @onmousedown:preventDefault
     ondragover="event.preventDefault()" @ondrop="@OnDrop" @onkeydown="@OnKeyDown" tabindex="-1">
    <div style="width:100%; height:100%; position:absolute;" @onclick="@OnClick"></div>
    <div id="nodegraph" style="position:relative; transform-origin:0% 0%; width:0px; height:0px;">
        @foreach (var node in ViewModel.ComponentNodes)
        {
            <NodeView @key="node" ViewModel="node" />
        }
        <svg style="overflow:visible; position:absolute;">
            <NoodleSvg Noodle="NoodleDragService.TempNoodle" DomId="tempNoodle" />
        </svg>
        <svg style="overflow:visible; position:absolute;">
            <NoodleCollection Connections="@ViewModel.Connections" />
        </svg>
    </div>
</div>

@code {
    [Parameter]
    public VirtualStudioViewModel ViewModel
    {
        get => _viewModel;
        set
        {
            if (_viewModel != null)
                _viewModel.ComponentNodes.CollectionChanged -= OnComponentNodesChanged;
            _viewModel = value;
            if (_viewModel != null)
                _viewModel.ComponentNodes.CollectionChanged += OnComponentNodesChanged;
        }
    }
    private VirtualStudioViewModel _viewModel;


    private void OnComponentNodesChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        StateHasChanged();
    }

    async Task StartPan(MouseEventArgs e)
    {
        // clickStartPos = e.GetClientPos();
        // await JSRuntime.InvokeVoidAsync("panzoom.startPan");
    }

    void OnDrop(DragEventArgs e)
    {
        // NodeDragService.OnDrop(e);
        // Refresh();
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        //if (e.Key == "Delete" || e.Key == "Backspace")
        //{
        //    NodeHandler.DeleteSelectedNode();
        //}
        //else if (e.Key == "Escape")
        //{
        //    DeselectNode();
        //}
    }

    void OnClick(MouseEventArgs e)
    {
        //const int dragThreshold = 4; //Length in px to consider a drag (instead of a click)
        //var mouseOffset = e.GetClientPos() - clickStartPos;

        //if (mouseOffset.GetLength() <= dragThreshold)
        //{
        //    DeselectNode();
        //}
    }
}
