@using VirtualStudio.ViewModels
@using System.ComponentModel
@inject INodeDragService NodeDragService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="node @CssClass"
     style="transform: translate(@((long)ViewModel.PositionX)px, @((long)ViewModel.PositionY)px); width: @($"{ComponentViewModel.Width}px"); --col-node-accent:@cssColor;"
     @onmousedown="StartDrag" @onmousedown:stopPropagation
     @onclick="Select"
     @onfocusin="Deselect">

    <StudioComponentView ViewModel="ViewModel.Component" />
</div>

@code {
    ComponentNodeViewModel _viewModel;
    [Parameter]
    public ComponentNodeViewModel ViewModel
    {
        get => _viewModel;
        set
        {
            if (_viewModel != null)
                _viewModel.PropertyChanged -= ViewModel_PropertyChanged;
            _viewModel = value ?? throw new ArgumentNullException();
            _viewModel.PropertyChanged += ViewModel_PropertyChanged;
        }
    }

    [CascadingParameter]
    protected SignalRVirtualStudioController VirtualStudioController { get; set; }

    ElementReference NodeDiv { get; set; }
    string cssColor = "#ff8c00";

    string CssClass => ViewModel.IsSelected ? "node-selected" : "";

    async Task StartDrag(MouseEventArgs e)
    {
        NodeDragService.OnStartNodeDrag(ViewModel, e, VirtualStudioController);
        await JSRuntime.InvokeVoidAsync("NodeDragHandler.startNodeDrag");
    }

    void Select(MouseEventArgs e)
    {
        ViewModel.IsSelected = true;
        //if (!NodeDragService.IsDrag(e))
        //{
        //    NodeHandler.SelectNode(Data);
        //}
    }

    void Deselect()
    {
        ViewModel.IsSelected = false;
        // NodeHandler.DeselectAllNodes();
    }

    void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        if (_viewModel != null)
        {
            _viewModel.PropertyChanged -= ViewModel_PropertyChanged;
            _viewModel = null;
        }
    }
}
