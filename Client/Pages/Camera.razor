@page "/camera"
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using VirtualStudio.Shared.DTOs
@using VirtualStudio.Shared
@using VirtualStudio.Client.Shared.CameraPage
@using VirtualStudio.Shared.Connection
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<h1>Camera</h1>

<p>Connection state: @connectionState</p>

<EditForm Model="@this" OnValidSubmit="@JoinVirtualStudio">
    <div>
        <InputText id="name" @bind-Value="name" />
        <InputText id="virtualStudioName" @bind-Value="virtualStudioName" />
        <button type="submit">Join</button>
    </div>
    <div>
        Show feedback:
        <InputCheckbox @bind-Value="showFeedback" />
    </div>
</EditForm>

<div class="@(showFeedback ? "" : "collapse")">
    <video @ref="receivingVideoElement" autoplay playsinline></video>
    <p @ref="rtpTimestamp"></p>
</div>

<div class="@(!showFeedback ? "" : "collapse" )">
    <video @ref="sendingVideoElement" autoplay playsinline></video>
</div>

@code {
    private SignalRVirtualStudioConnection virtualStudioConnection;
    private string connectionState = "Disconnected";
    private string name = "Camera";
    private string virtualStudioName = "vs";
    private bool isTaskRunning = false;
    private bool showFeedback = false;

    ElementReference sendingVideoElement;
    ElementReference receivingVideoElement;
    ElementReference rtpTimestamp;
    WebRtcManager webRtcManager;

    StudioComponentDto studioComponentDto = new StudioComponentDto
    {
        Name = "Camera",
        IsPlaceholder = false,
        Inputs = new List<StudioComponentEndpointDto>
{
            new StudioComponentEndpointDto(){IOType = EndpointIOType.Input, ConnectionType = "WebRTC", DataKind = DataKind.Video, Id = 2, Name = "Feedback"}
        },
        Outputs = new List<StudioComponentEndpointDto>
{
            new StudioComponentEndpointDto(){IOType = EndpointIOType.Output, ConnectionType = "WebRTC", DataKind = DataKind.VideoAudio, Id = 1, Name = "Video"}
        }
    };

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
        virtualStudioConnection = await SignalRVirtualStudioConnection.CreateAsync(NavigationManager.BaseUri);
        connectionState = virtualStudioConnection.ConnectionState.ToString();
    }

    private async void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (args.Location != NavigationManager.Uri)
        {
            await DisposeAsync();
        }
    }

    private async Task JoinVirtualStudio()
    {
        if (webRtcManager != null)
            await webRtcManager.DisposeAsync();

        studioComponentDto = new StudioComponentDto
        {
            Name = !string.IsNullOrWhiteSpace(name) ? name : "Camera",
            IsPlaceholder = false,
            Inputs = new List<StudioComponentEndpointDto>
            {
                new StudioComponentEndpointDto(){IOType = EndpointIOType.Input, ConnectionType = "WebRTC", DataKind = DataKind.Video, Id = 2, Name = "Feedback"}
            },
            Outputs = new List<StudioComponentEndpointDto>
            {
            new StudioComponentEndpointDto(){IOType = EndpointIOType.Output, ConnectionType = "WebRTC", DataKind = DataKind.VideoAudio, Id = 1, Name = "Video"}
            }
        };

        webRtcManager = await WebRtcManager.CreateAsync(virtualStudioConnection, studioComponentDto, JS, receivingVideoElement, rtpTimestamp);
        await webRtcManager.OpenCameraAsync(sendingVideoElement);

        await virtualStudioConnection.JoinVirtualStudio(virtualStudioName, studioComponentDto);
    }

    public async ValueTask DisposeAsync()
    {
        await virtualStudioConnection.LeaveVirtualStudio(virtualStudioName);

        if (webRtcManager != null)
            await webRtcManager.DisposeAsync();

        await virtualStudioConnection.DisposeAsync();
        NavigationManager.LocationChanged -= NavigationManager_LocationChanged;
    }
}
