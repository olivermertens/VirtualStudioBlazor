@page "/control"
@using Microsoft.AspNetCore.SignalR.Client
@using VirtualStudio.Core.Operations
@using VirtualStudio.ViewModels
@using VirtualStudio.Shared.DTOs
@using VirtualStudio.Shared.Abstractions
@using VirtualStudio.Shared
@using VirtualStudio.Client.Shared.ControlPage;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>Control</h1>

<p>Connection state: @connectionState</p>

<EditForm Model="@this" OnValidSubmit="@JoinVirtualStudio">
    <InputText id="name" @bind-Value="virtualStudioName" />

    <button type="submit">Join</button>
</EditForm>
@if (virtualStudioViewModel != null)
{
    <CascadingValue Value="virtualStudioController">
        <CascadingValue Value="virtualStudioViewModel">
            <NodeGraph ViewModel="virtualStudioViewModel"></NodeGraph>
        </CascadingValue>
    </CascadingValue>
}

@code {

    private SignalRVirtualStudioController virtualStudioController;

    private string virtualStudioName;
    private HubConnection hubConnection;
    private string connectionState { get { if (hubConnection is null) { return "Disconnected"; } else { return hubConnection.State.ToString(); } } }
    private VirtualStudioViewModel virtualStudioViewModel;

    private readonly System.Text.Json.JsonSerializerOptions jsonSerializerOptions = new System.Text.Json.JsonSerializerOptions { WriteIndented = true };
    private SignalRVirtualStudioViewModelUpdater viewModelUpdater;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/control"))
            .Build();

        await hubConnection.StartAsync();
    }

    private async void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (args.Location != NavigationManager.ToAbsoluteUri("control").AbsolutePath)
        {
            await DisposeAsync();
        }
    }

    private async Task JoinVirtualStudio()
    {
        bool success = await hubConnection.InvokeAsync<bool>("JoinVirtualStudio", virtualStudioName);
        if (success)
        {
            var getVirtualStudioResponse = await hubConnection.InvokeAsync<OperationResponse<VirtualStudioWithArrangementDto>>("GetVirtualStudioWithArrangement");
            if (getVirtualStudioResponse.Status == OperationStatus.Success)
            {
                if (viewModelUpdater != null)
                    viewModelUpdater.Dispose();

                var virtualStudioViewModel = new VirtualStudioViewModel(getVirtualStudioResponse.Data);
                viewModelUpdater = new SignalRVirtualStudioViewModelUpdater(virtualStudioViewModel, hubConnection);
                virtualStudioController = new SignalRVirtualStudioController(virtualStudioName, hubConnection);
                this.virtualStudioViewModel = virtualStudioViewModel;
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= NavigationManager_LocationChanged;
        viewModelUpdater?.Dispose();
        await hubConnection.DisposeAsync();
    }
}
